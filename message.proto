// BSD 3-Clause License
//
// Copyright (c) 2020, Sperax
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived from
//    this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";
package bdls;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// SignedProto defines a message with signature and it's publickey
message SignedProto {
	uint32 version=1;
	// the Message encoded raw protobuf in bytes
	bytes Message=2;
	// signer's public key
	bytes x = 3 [(gogoproto.customtype) = "PubKeyAxis", (gogoproto.nullable) = false];
	bytes y = 4 [(gogoproto.customtype) = "PubKeyAxis", (gogoproto.nullable) = false];
	// signature r,s for prefix+messages+version+x+y above
	bytes r = 5;
	bytes s = 6;
}

// MessageType defines supported message types
enum MessageType{
	// No operation, for default message type, and keepalive connection
	Nop = 0;
	// MessageRoundChange = <roundchange> message
	RoundChange = 1;
	// MessageLock = <lock> message
	Lock = 2;
	// MessageSelect = <select> message
	Select = 3;
	// MessageCommit = <commit> message
	Commit = 4; 
	// MessageLockRelease = <lock-release> message
	LockRelease = 5;
	// MessageDecide = <decide> message
	Decide = 6;
	// MessageResync= <resync> message
	Resync = 7;
}

// Message defines a consensus message
message Message {
	// Type of this message
	MessageType Type = 1;
	// Height in consensus
	uint64 Height = 2;
	// Round in consensus
	uint64 Round  = 3; 
	// Proposed state (optional)
	bytes State = 4; 
	// Proofs related
	repeated SignedProto Proof=5;
	// for lock-release, it's an embeded <lock> message
	SignedProto LockRelease=6;
}
